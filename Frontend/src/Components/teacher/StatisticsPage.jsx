import React, {useMemo, useState} from 'react';
import styles from './StatisticsPage.module.css';
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';
import { useNavigate, useParams } from "react-router-dom";
import { useGetCoursesQuery, useGetPlatformProgressQuery } from "../../Redux/api/coursesApi.js";

const StatisticsPage = () => {
    const navigate = useNavigate();

    const { data: coursesData = [], isLoading, error } = useGetCoursesQuery();
    const { data: platformProgress = [], isLoading: platformLoading, error: platformError } = useGetPlatformProgressQuery();

    const chartData = useMemo(() => {
        const threeCourses = platformProgress?.threeCourses;
        if (threeCourses && typeof threeCourses === 'object') {
            return Object.entries(threeCourses).map(([courseName, progress]) => ({
                course: courseName,
                progress: progress
            }));
        }
        return [];
    }, [platformProgress]);

    const handleCourseClick = (courseId) => {
        navigate(`/teacher/mycourses/detail/${courseId}`);
    };

    return (
        <div className={styles.statisticsContainer}>
            <h2 className={styles.title}>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</h2>

            <div className={styles.cardsContainer}>
                <div className={styles.statCard}>
                    <h3>üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                    <p className={styles.statNumber}>{platformProgress.allUsersCount}</p>
                </div>
                <div className={styles.statCard}>
                    <h3>üìö –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤</h3>
                    <p className={styles.statNumber}>{platformProgress.allCoursesCount}</p>
                </div>
                <div className={styles.statCard}>
                    <h3>‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫—É—Ä—Å–æ–≤</h3>
                    <p className={styles.statNumber}>{platformProgress.allCompletedCoursesCount}</p>
                </div>
            </div>

            <div className={styles.chartSection}>
                <h3 className={styles.sectionTitle}>üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è / –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ 3 –∫—É—Ä—Å–∞–º</h3>
                {platformLoading ? (
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞...</p>
                ) : chartData.length > 0 ? (
                    <ResponsiveContainer width="100%" height={300}>
                        <BarChart data={chartData}>
                            <XAxis dataKey="course" />
                            <YAxis />
                            <Tooltip />
                            <Bar dataKey="progress" fill="#4f46e5" />
                        </BarChart>
                    </ResponsiveContainer>
                ) : (
                    <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º.</p>
                )}
            </div>

            <div className={styles.topStudentsSection}>
                <h3 className={styles.sectionTitle}>üèÜ –¢–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –∫—É—Ä—Å–∞–º</h3>
                <ul className={styles.studentsList}>
                    {platformProgress?.bestUsers && Array.isArray(platformProgress.bestUsers) && (
                        platformProgress.bestUsers.map((student, index) => (
                            <li key={index} className={styles.studentItem}>
                                {index + 1}. {student}
                            </li>
                        ))
                    )}
                    {(!platformProgress || !platformProgress.bestUsers || platformProgress.bestUsers.length === 0) && !isLoading && (
                        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ª—É—á—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è.</p>
                    )}
                </ul>
            </div>

            <div>
                <h3>–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤</h3>
                <ul className={styles.studentsList}>
                    {coursesData.map((course, index) => (
                        <li key={index} className={styles.studentItem} onClick={() => { handleCourseClick(course.id) }}>
                            {index + 1}. {course.title}
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    );
};

export default StatisticsPage;
